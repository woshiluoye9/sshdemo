<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

    <!-- Spring 的配置文件 -->

	<!-- 加载数据源配置文件 -->
	<context:property-placeholder location="classpath:db.properties" />

	<!-- 数据源，使用c3p0数据库连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 下面还可以接着添加一些数据库连接池的配置-->
	</bean>


	<!-- Spring 来管理 sqlSessinFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 加载mybatis的配置文件 -->
		<property name="configLocation" value="mybatis\sqlMapConfig.xml" />
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 原始dao接口 -->
	
	<bean id="userDao" class="com.dustin.mybatis.dao.UserDaoImpl">
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean>
	
	<!-- mapper配置  第一种方式 单个类单个类的设置
	MapperFactoryBean：根据mapper接口生成 mapper 代理对象
	-->
	<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<!--mapperInterface指定mapper接口-->
		<property name="mapperInterface" value="com.dustin.mybatis.mapper.UserMapper"/>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean>
	<bean id="ordersMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<!--mapperInterface指定mapper接口-->
		<property name="mapperInterface" value="com.dustin.mybatis.mapper.OrdersMapper"/>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean>
	<bean id="orderdetailMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<!--mapperInterface指定mapper接口-->
		<property name="mapperInterface" value="com.dustin.mybatis.mapper.OrderdetailMapper"/>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean>
	<bean id="itemsMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<!--mapperInterface指定mapper接口-->
		<property name="mapperInterface" value="com.dustin.mybatis.mapper.ItemsMapper"/>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean>

	<!-- 第二种方式： mapper批量扫描， 此时要将mapper.xml 文件放到mappper接口所在的文件夹下
	从mapper包中扫描出mapper接口，自动创建代理对象并且在spring容器中注册
	遵循规范：将mapper.java和mapper.xml映射文件名称保持一致，且在一个目录 中
	自动扫描出来的mapper的bean的id为mapper类名（首字母小写）
	-->
	<!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
		<!--&lt;!&ndash; 指定扫描的包名 -->
		<!--如果扫描多个包，每个包中间使用半角逗号分隔-->
		<!--&ndash;&gt;-->
		<!--<property name="basePackage" value="com.dustin.mybatis.mapper"/>-->
		<!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>-->
		<!---->
	<!--</bean>-->

</beans>